# bot.py
import os
import sys
import requests
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python
print(f"üêç Python version: {sys.version}")
print(f"üì¶ Python executable: {sys.executable}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã (—É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã)
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN").strip()
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY").strip()
FOLDER_ID = os.getenv("FOLDER_ID").strip()

# –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —à–∫–æ–ª—ã
def load_school_context():
    try:
        with open("school_context.txt", "r", encoding="utf-8") as f:
            return f.read().strip()
    except FileNotFoundError:
        logger.error("‚ùå –§–∞–π–ª school_context.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

SCHOOL_CONTEXT = load_school_context()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
CHAT_HISTORY = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT —Å –∏—Å—Ç–æ—Ä–∏–µ–π
async def ask_yandex_gpt(user_question: str, chat_history: list) -> str:
    # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω—ã –ø—Ä–æ–±–µ–ª—ã –≤ URL
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }

    messages = [
        {
            "role": "system",
            "text": f"–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–µ—Ç—Å–∫–æ–π —è–∑—ã–∫–æ–≤–æ–π —à–∫–æ–ª—ã. "
                    f"–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n{SCHOOL_CONTEXT}\n"
                    f"–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî —Å–∫–∞–∂–∏, —á—Ç–æ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Ç–æ–ª—å–∫–æ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ —à–∫–æ–ª–µ. "
                    f"–ù–µ –≤—ã–¥—É–º—ã–≤–∞–π. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É."
        }
    ]

    for msg in chat_history:
        messages.append({"role": "user", "text": msg["question"]})
        messages.append({"role": "assistant", "text": msg["answer"]})

    messages.append({"role": "user", "text": user_question})

    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt-lite",
        "completionOptions": {
            "temperature": 0.6,
            "maxTokens": 500
        },
        "messages": messages
    }

    try:
        response = requests.post(url, headers=headers, json=data)
        response.raise_for_status()
        result = response.json()
        return result["result"]["alternatives"][0]["message"]["text"]
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ YandexGPT: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    logger.info(f"üëã /start –æ—Ç: {user.full_name} (@{user.username}, ID: {user.id})")
    await update.message.reply_text(
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –±–æ—Ç —è–∑—ã–∫–æ–≤–æ–π —à–∫–æ–ª—ã Today.\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –æ –∑–∞–Ω—è—Ç–∏—è—Ö, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö, —Ü–µ–Ω–∞—Ö –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ.\n"
        "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_text = update.message.text.strip()
    logger.info(f"üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} (@{user.username}): {user_text}")

    user_id = user.id
    if user_id not in CHAT_HISTORY:
        CHAT_HISTORY[user_id] = []

    history = CHAT_HISTORY[user_id]
    answer = await ask_yandex_gpt(user_text, history)

    history.append({"question": user_text, "answer": answer})
    if len(history) > 5:
        history.pop(0)

    logger.info(f"ü§ñ –ë–æ—Ç: {answer}")
    await update.message.reply_text(answer)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    if not all([TELEGRAM_TOKEN, YANDEX_API_KEY, FOLDER_ID]):
        logger.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –≤ .env")
        return

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    try:
        app = Application.builder().token(TELEGRAM_TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        app.add_error_handler(error_handler)

        PORT = int(os.environ.get("PORT", 10000))

        # üöÄ –§–æ—Ä–º–∏—Ä—É–µ–º URL –≤–µ–±—Ö—É–∫–∞
        service_name = os.getenv('RENDER_SERVICE_NAME')
        if service_name:
            webhook_url = f"https://{service_name}.onrender.com/{TELEGRAM_TOKEN}"
        else:
            # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω—ã –ø—Ä–æ–±–µ–ª—ã
            webhook_url = f"https://your-domain.com/{TELEGRAM_TOKEN}"  # –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏

        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        logger.info(f"üåê Webhook URL: {webhook_url}")

        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=TELEGRAM_TOKEN,
            webhook_url=webhook_url,
            drop_pending_updates=True
        )

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        # Fallback –Ω–∞ polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        if not os.getenv('RENDER_SERVICE_NAME'):
            logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
            app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
