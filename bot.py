# bot.py
import os
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
YANDEX_API_KEY = os.getenv("YANDEX_API_KEY")
FOLDER_ID = os.getenv("FOLDER_ID")

# –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —à–∫–æ–ª—ã
def load_school_context():
    try:
        with open("school_context.txt", "r", encoding="utf-8") as f:
            return f.read().strip()
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª school_context.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

SCHOOL_CONTEXT = load_school_context()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
CHAT_HISTORY = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT —Å –∏—Å—Ç–æ—Ä–∏–µ–π
async def ask_yandex_gpt(user_question: str, chat_history: list) -> str:
    # üî¥ –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª –≤ –∫–æ–Ω—Ü–µ URL
    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Authorization": f"Api-Key {YANDEX_API_KEY}",
        "Content-Type": "application/json"
    }

    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    messages = [
        {
            "role": "system",
            "text": f"–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –¥–µ—Ç—Å–∫–æ–π —è–∑—ã–∫–æ–≤–æ–π —à–∫–æ–ª—ã. "
                    f"–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n{SCHOOL_CONTEXT}\n"
                    f"–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ ‚Äî —Å–∫–∞–∂–∏, —á—Ç–æ –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Ç–æ–ª—å–∫–æ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ —à–∫–æ–ª–µ. "
                    f"–ù–µ –≤—ã–¥—É–º—ã–≤–∞–π. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É."
        }
    ]

    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    for msg in chat_history:
        messages.append({
            "role": "user",
            "text": msg["question"]
        })
        messages.append({
            "role": "assistant",
            "text": msg["answer"]
        })

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
    messages.append({
        "role": "user",
        "text": user_question
    })

    data = {
        "modelUri": f"gpt://{FOLDER_ID}/yandexgpt-lite",
        "completionOptions": {
            "temperature": 0.6,
            "maxTokens": 500
        },
        "messages": messages
    }

    try:
        response = requests.post(url, headers=headers, json=data)
        result = response.json()
        return result["result"]["alternatives"][0]["message"]["text"]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ YandexGPT: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å."

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    print(f"üëã /start –æ—Ç: {user.full_name} (@{user.username}, ID: {user.id})")
    await update.message.reply_text(
        "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –±–æ—Ç —è–∑—ã–∫–æ–≤–æ–π —à–∫–æ–ª—ã Today.\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å –æ –∑–∞–Ω—è—Ç–∏—è—Ö, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è—Ö, —Ü–µ–Ω–∞—Ö –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ.\n"
        "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_text = update.message.text.strip()
    
    # üî• –õ–û–ì–ò–†–£–ï–ú –í–•–û–î–Ø–©–ï–ï –°–û–û–ë–©–ï–ù–ò–ï
    print(f"üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} (@{user.username}): {user_text}")

    user_id = user.id
    if user_id not in CHAT_HISTORY:
        CHAT_HISTORY[user_id] = []

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    history = CHAT_HISTORY[user_id]
    answer = await ask_yandex_gpt(user_text, history)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    history.append({
        "question": user_text,
        "answer": answer
    })
    if len(history) > 5:
        history.pop(0)

    # üî• –õ–û–ì–ò–†–£–ï–ú –û–¢–í–ï–¢ –ë–û–¢–ê
    print(f"ü§ñ –ë–æ—Ç: {answer}")

    await update.message.reply_text(answer)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    if not all([TELEGRAM_TOKEN, YANDEX_API_KEY, FOLDER_ID]):
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—Å–µ —Ç–æ–∫–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –≤ .env")
        return

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()